\input texinfo @c -*-texinfo-*-
@setfilename svg+.info
@settitle Extended SVG image creation functions

@copying
This manual is for SVG+.

Copyright @copyright{} 2016--2018 Felix E. Klee, Free Software
Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.''
@end quotation
@end copying

@dircategory Emacs
@direntry
* SVG+: (svg+).     Extended SVG image creation functions
@end direntry

@titlepage
@title SVG+
@author Felix E. Klee, Free Software Foundation, Inc.

@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

@contents

@node Top
@top SVG+

@ifnottex
@insertcopying
@end ifnottex

@menu
* Introduction::
* Usage::
* Path Commands::
* GNU Free Documentation License::  The license for this documentation.
* Index::
@end menu

@node Introduction
@chapter Introduction

This package is based on the SVG package (svg.el) written by Lars
Magne Ingebrigtsen and included in Emacs 26.1.  SVG+ provides
additional SVG editing functions.

@node Usage
@chapter Usage

SVG (Scalable Vector Graphics) is an XML format for specifying images.
If your Emacs build has SVG support, you can create and manipulate
these images with the following functions.

@defun svg+-create width height &rest args
Create a new, empty SVG image with the specified dimensions.
@var{args} is an argument plist with you can specify following:

@table @code
@item :stroke-width
The default width (in pixels) of any lines created.

@item :stroke
The default stroke color on any lines created.
@end table

This function returns an SVG structure, and all the following functions
work on that structure.
@end defun

@defun svg+-gradient svg id type stops
Create a gradient in @var{svg} with identifier @var{id}.  @var{type}
specifies the gradient type, and can be either @code{linear} or
@code{radial}.  @var{stops} is a list of percentage/color pairs.

The following will create a linear gradient that goes from red at the
start, to green 25% of the way, to blue at the end:

@lisp
(svg+-gradient svg "gradient1" 'linear
               '((0 . "red") (25 . "green") (100 . "blue")))
@end lisp

The gradient created (and inserted into the SVG object) can later be
used by all functions that create shapes.
@end defun

All the following functions take an optional list of keyword
parameters that alter the various attributes from their default
values.  Valid attributes include:

@table @code
@item :stroke-width
The width (in pixels) of lines drawn, and outlines around solid
shapes.

@item :stroke-color
The color of lines drawn, and outlines around solid shapes.

@item :fill-color
The color used for solid shapes.

@item :id
The identifier of the shape.

@item :gradient
If given, this should be the identifier of a previously defined
gradient object.

@item :clip-path
Identifier of a clip path.
@end table

@defun svg+-rectangle svg x y width height &rest args
Add a rectangle to @var{svg} where the upper left corner is at
position @var{x}/@var{y} and is of size @var{width}/@var{height}.

@lisp
(svg+-rectangle svg 100 100 500 500 :gradient "gradient1")
@end lisp
@end defun

@defun svg+-circle svg x y radius &rest args
Add a circle to @var{svg} where the center is at @var{x}/@var{y}
and the radius is @var{radius}.
@end defun

@defun svg+-ellipse svg x y x-radius y-radius &rest args
Add a circle to @var{svg} where the center is at @var{x}/@var{y} and
the horizontal radius is @var{x-radius} and the vertical radius is
@var{y-radius}.
@end defun

@defun svg+-line svg x1 y1 x2 y2 &rest args
Add a line to @var{svg} that starts at @var{x1}/@var{y1} and extends
to @var{x2}/@var{y2}.
@end defun

@defun svg+-polyline svg points &rest args
Add a multiple segment line to @var{svg} that goes through
@var{points}, which is a list of X/Y position pairs.

@lisp
(svg+-polyline svg '((200 . 100) (500 . 450) (80 . 100))
               :stroke-color "green")
@end lisp
@end defun

@defun svg+-polygon svg points &rest args
Add a polygon to @var{svg} where @var{points} is a list of X/Y pairs
that describe the outer circumference of the polygon.

@lisp
(svg+-polygon svg '((100 . 100) (200 . 150) (150 . 90))
              :stroke-color "blue" :fill-color "red"")
@end lisp
@end defun

@defun svg+-path svg commands &rest args
Add the outline of a shape to @var{svg}.  The @var{commands} follow
the Scalable Vector Graphics standard.

Coordiates by default are absolute.  To use coordinates relative to
the last position, or - initially - to the origin, set the attribute
@var{:relative} to @code{t}.  This attribute can be specified to the
function or to individual commands.  If specified for the function,
then all commands use relative coordinates by default.  To make an
individual command use absolute coordinates, set @var{:relative} to
@code{nil}.

@lisp
(svg+-path svg
           '((moveto ((100 . 200)))
             (elliptical-arc ((100 100 100 -100 :large-arc t)))
             (lineto ((0 . 0)) :relative nil)
             (closepath))
           :stroke-color "blue"
           :fill-color "lightblue"
           :relative t)
@end lisp
@end defun

@defun svg+-text svg text &rest args
Add a text to @var{svg}.

@lisp
(svg+-text
 svg "This is a text"
 :font-size "40"
 :font-weight "bold"
 :stroke "black"
 :fill-color "white"
 :font-family "impact"
 :letter-spacing "4pt"
 :x 300
 :y 400
 :stroke-width 1)
@end lisp
@end defun

@defun svg+-embed svg image image-type datap &rest args
Add an embedded (raster) image to @var{svg}.  If @var{datap} is
@code{nil}, @var{IMAGE} should be a file name; if not, it should be a
binary string containing the image data.  @var{image-type} should be a
@acronym{MIME} image type, for instance @samp{"image/jpeg"}.

@lisp
(svg+-embed svg "~/rms.jpg" "image/jpeg" nil
            :width "100px" :height "100px"
            :x "50px" :y "75px")
@end lisp
@end defun

@defun svg+-clip-path svg &rest args
Create a clipping path to @var{svg}.  If applied to a shape via the
@var{:clip-path} property, parts of that shape which lie outside of
the clipping path are not drawn.

@lisp
(let ((clip-path (svg+-clip-path svg :id "foo")))
  (svg+-circle clip-path 350 350 300 :stroke-width 0))
(svg+-rectangle svg 100 100 500 500
                :fill-color "red"
                :clip-path "url(#foo)")
@end lisp
@end defun

@defun svg+-node svg tag &rest args
Add custom node @var{tag} to @var{svg}.

@lisp
(svg+-node svg
           'rect
           :width 400 :height 200 :x 50 :y 100 :fill-color "green")
@end lisp
@end defun

@defun svg+-remove svg id
Remove the element with identifier @code{id} from the @code{svg}.
@end defun

Finally, the @code{svg+-image} takes an SVG object as its parameter and
returns an image object suitable for use in functions like
@code{insert-image}.  Here's a complete example that creates and inserts
an image with a circle:

@lisp
(let ((svg (svg+-create 400 400 :stroke-width 10)))
  (svg+-gradient svg "gradient1" 'linear '((0 . "red") (100 . "blue")))
  (svg+-circle svg 200 200 100 :gradient "gradient1"
                   :stroke-color "green")
  (insert-image (svg+-image svg)))
@end lisp

@node Path Commands
@chapter Path Commands

@deffn Command moveto points
Move the pen to the first point in @var{points}.  Additional points
are connected with lines.  @var{points} is a list of X/Y coordinate
pairs.  Subsequent @command{moveto} commands represent the start of a
new @dfn{subpath}.

@lisp
(svg+-path svg '((moveto ((200 . 100) (100 . 200) (0 . 100))))
           :fill-color "white" :stroke "black")
@end lisp
@end deffn

@deffn Command closepath
End the current subpath by connecting it back to its initial point.  A
line is drawn along the connection.

@lisp
(svg+-path svg '((moveto ((200 . 100) (100 . 200) (0 . 100)))
                 (closepath)
                 (moveto ((75 . 125) (100 . 150) (125 . 125)))
                 (closepath))
           :fill-color "red" :stroke "black")
@end lisp
@end deffn

@deffn Command lineto points
Draw lines between @var{points}, which is a list of X/Y position
pairs.
cb
@lisp
(svg+-path svg '((moveto ((200 . 100)))
                 (lineto ((100 . 200) (0 . 100))))
           :fill-color "yellow" :stroke "red")
@end lisp
@end deffn

@deffn Command horizontal-lineto x-coordinates
Draw horizontal lines from the current point to @var{x-coordinates}.
Specifying multiple x-coordinates is possible, although usually this
doesn’t make sense.

@lisp
(svg+-path svg '((moveto ((100 . 200)))
                 (horizontal-lineto (300)))
           :stroke "green")
@end lisp
@end deffn

@deffn Command vertical-lineto y-coordinates
Draw vertical lines to @var{y-coordinates}.

@lisp
(svg+-path svg '((moveto ((200 . 100)))
                 (horizontal-lineto (300)))
           :stroke "green")
@end lisp
@end deffn

@deffn Command curveto coordinate-sets
Using the first coordinate set, draw a cubic Bézier curve from the
current point.  If there are multiple coordinate sets, draw a
polybézier.  Each coordinate set is a list of the form @code{(@var{x1}
@var{y1} @var{x2} @var{y2} @var{x} @var{y})}, where @w{(@var{x},
@var{y})} is the curve’s end point.  @w{(@var{x1}, @var{y1})} and
@w{(@var{x2}, @var{y2})} are control points at the beginning and at
the end, respectively.

@lisp
(svg+-path svg '((moveto ((100 . 100)))
                 (curveto ((200 100 100 200 200 200)
                           (300 200 0 100 100 100))))
           :fill-color "transparent" :stroke "red")
@end lisp
@end deffn

@deffn Command smooth-curveto coordinate-sets
Using the first coordinate set, draw a cubic Bézier curve from the
current point.  If there are multiple coordinate sets, draw a
polybézier.  Each coordinate set is a list of the form @code{(@var{x2}
@var{y2} @var{x} @var{y})}, where @w{(@var{x}, @var{y})} is the
curve’s end point and @w{(@var{x2}, @var{y2})} is the corresponding
control point.  The first control point is the reflection of the
second control point of the previous command relative to the current
point, if that command was @command{curveto} or
@command{smooth-curveto}.  Otherwise the first control point coincides
with the current point.

@lisp
(svg+-path svg '((moveto ((100 . 100)))
                 (curveto ((200 100 100 200 200 200)))
                 (smooth-curveto ((0 100 100 100))))
           :fill "transparent" :stroke "blue")
@end lisp
@end deffn

@deffn Command quadratic-bezier-curveto coordinate-sets
Using the first coordinate set, draw a quadratic Bézier curve from the
current point.  If there are multiple coordinate sets, draw a
polybézier.  Each coordinate set is a list of the form @code{(@var{x1}
@var{y1} @var{x} @var{y})}, where @w{(@var{x}, @var{y})} is the
curve’s end point and @w{(@var{x1}, @var{y1})} is the control point.

@lisp
(svg+-path svg '((moveto ((200 . 100)))
                 (quadratic-bezier-curveto ((300 100 300 200)))
                 (quadratic-bezier-curveto ((300 300 200 300)))
                 (quadratic-bezier-curveto ((100 300 100 200)))
                 (quadratic-bezier-curveto ((100 100 200 100))))
           :fill "transparent" :stroke "pink")
@end lisp
@end deffn

@deffn Command smooth-quadratic-bezier-curveto coordinate-sets
Using the first coordinate set, draw a quadratic Bézier curve from the
current point.  If there are multiple coordinate sets, draw a
polybézier.  Each coordinate set is a list of the form @code{(@var{x}
@var{y})}, where @w{(@var{x}, @var{y})} is the curve’s end point.  The
control point is the reflection of the control point of the previous
command relative to the current point, if that command was
@command{quadratic-bezier-curveto} or
@command{smooth-quadratic-bezier-curveto}.  Otherwise the control
point coincides with the current point.

@lisp
(svg+-path svg '((moveto ((200 . 100)))
                 (quadratic-bezier-curveto ((300 100 300 200)))
                 (smooth-quadratic-bezier-curveto ((200 300)))
                 (smooth-quadratic-bezier-curveto ((100 200)))
                 (smooth-quadratic-bezier-curveto ((200 100))))
           :fill "transparent" :stroke "lightblue")
@end lisp
@end deffn

@deffn Command elliptical-arc coordinate-sets
Using the first coordinate set, draw an elliptical arc from the
current point.  If there are multiple coordinate sets, draw a sequence
of elliptical arcs.  Each coordinate set is a list of the form
@code{(@var{rx} @var{ry} @var{x} @var{y})}, where @w{(@var{x},
@var{y})} is the end point of the ellipse, and @w{(@var{rx},
@var{ry})} are its radii.  Attributes may be appended to the list:

@table @code
@item :x-axis-rotation
The angle in degrees by which the x-axis of the ellipse is rotated
relative to the x-axis of the current coordinate system.

@item :large-arc
If set to @code{t}, draw an arc sweep greater than or equal to 180
degrees.  Otherwise, draw a smaller arc sweep.

@item :sweep
If set to @code{t}, draw an arc in @dfn{positive angle direction}.
Otherwise, draw it in @dfn{negative angle direction}.
@end table

@lisp
(svg+-path svg '((moveto ((200 . 250)))
                 (elliptical-arc ((75 75 200 350))))
           :fill "transparent" :stroke "red")
(svg+-path svg '((moveto ((200 . 250)))
                 (elliptical-arc ((75 75 200 350 :large-arc t))))
           :fill "transparent" :stroke "green")
(svg+-path svg '((moveto ((200 . 250)))
                 (elliptical-arc ((75 75 200 350 :sweep t))))
           :fill "transparent" :stroke "blue")
(svg+-path svg '((moveto ((200 . 250)))
                 (elliptical-arc ((75 75 200 350 :large-arc t
                                      :sweep t))))
           :fill "transparent" :stroke "gray")
(svg+-path svg '((moveto ((160 . 100)))
                 (elliptical-arc ((40 100 80 0)))
                 (elliptical-arc ((40 100 -40 -70
                                      :x-axis-rotation -120)))
                 (elliptical-arc ((40 100 -40 70
                                      :x-axis-rotation -240))))
           :stroke "pink" :fill "lightblue"
           :relative t)
@end lisp
@end deffn

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include doclicense.texi

@node Index
@unnumbered Index

@printindex fn
